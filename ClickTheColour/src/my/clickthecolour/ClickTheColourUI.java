/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.clickthecolour;

import java.awt.Color;
import java.io.*;
import java.util.concurrent.ThreadLocalRandom;              // random number library
import java.util.*;


/**
 *
 * @author Gary
 */
public class ClickTheColourUI extends javax.swing.JFrame {

// Global variables
    // variable to count correct clicks (when it = 5, game is done)
    int clickCount = 0;
    // array to store times it took to click the right button
    long clickTime[] = new long[5];
    // boolean array for checking if a colour has already been assigned to a button
    boolean[] buttonColourChosen = {false, false, false, false};
    // Color array to assign colours to buttons randomly and their string names
    Color[] buttonColour = {Color.red, Color.blue, Color.yellow, Color.green};
    String[] colourNames = {"Red!", "Blue!", "Yellow!", "Green!"};
    // ints assigned to buttons based on their colour
    // Red: 0, Blue: 1, Yellow: 2, Green: 3
    int[] buttonValue = new int[4];
    // variables for determining time per button click
    long startTime = 0;
    long endTime = 0;
    // int for randomly generated correct colour number
    int correctColour = 0;
    // Player info
    String playerName = null;
    int playerAge = 0;
    // Player ArrayList
    ArrayList<Player> playerList = new ArrayList<Player>();
    
    /**
     * Creates new form ClickTheColourUI
     */
    public ClickTheColourUI() {
        initComponents();
        
    // Read file, create Player objects, and add to the Player ArrayList
        // Set up file reading
        try (FileReader fileInStream = new FileReader("src\\my\\clickthecolour\\PlayerRecord.txt");
            BufferedReader fileReader = new BufferedReader(fileInStream);) { 
            String line;
            while((line = fileReader.readLine()) != null) {
                // split line
                String[] splitData = line.split(":");
                // create objects based on age and add to ArrayList
                long[] timeData = new long[5];
                for(int i = 0; i < 5; i++) {
                    timeData[i] = Long.parseLong(splitData[i + 2]);
                }
                if(Integer.parseInt(splitData[1]) < 10) {
                    Player young = new YoungPlayer(splitData[0], Integer.parseInt(splitData[1]), timeData);
                    playerList.add(young);
                }
                else if(Integer.parseInt(splitData[1]) > 60) {
                    Player old = new OldPlayer(splitData[0], Integer.parseInt(splitData[1]), timeData);
                    playerList.add(old);
                }
                else {
                    Player normal = new Player(splitData[0], Integer.parseInt(splitData[1]), timeData);
                    playerList.add(normal);
                }
            }
        } catch (IOException e) {
            System.out.println("File not found.");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sortProperty = new javax.swing.ButtonGroup();
        sortOrder = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        button1 = new javax.swing.JButton();
        button2 = new javax.swing.JButton();
        button3 = new javax.swing.JButton();
        button4 = new javax.swing.JButton();
        readyButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        sortedArea = new javax.swing.JTextArea();
        sortByScore = new javax.swing.JRadioButton();
        sortByAge = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        ascendingOrder = new javax.swing.JRadioButton();
        descendingOrder = new javax.swing.JRadioButton();
        showSortedData = new javax.swing.JButton();
        statusBox = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        nameBox = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        ageBox = new javax.swing.JTextField();
        resetRecordsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Click the Colour!");

        startButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        resetButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        resetButton.setText("Reset");
        resetButton.setEnabled(false);
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        button1.setBackground(new java.awt.Color(0, 0, 0));
        button1.setEnabled(false);
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });

        button2.setBackground(new java.awt.Color(0, 0, 0));
        button2.setEnabled(false);
        button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2ActionPerformed(evt);
            }
        });

        button3.setBackground(new java.awt.Color(0, 0, 0));
        button3.setEnabled(false);
        button3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button3ActionPerformed(evt);
            }
        });

        button4.setBackground(new java.awt.Color(0, 0, 0));
        button4.setEnabled(false);
        button4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button4ActionPerformed(evt);
            }
        });

        readyButton.setText("Ready");
        readyButton.setEnabled(false);
        readyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readyButtonActionPerformed(evt);
            }
        });

        sortedArea.setColumns(20);
        sortedArea.setRows(5);
        jScrollPane1.setViewportView(sortedArea);

        sortProperty.add(sortByScore);
        sortByScore.setSelected(true);
        sortByScore.setText("Score");

        sortProperty.add(sortByAge);
        sortByAge.setText("Age");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Sort players by:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Sort order:");

        sortOrder.add(ascendingOrder);
        ascendingOrder.setSelected(true);
        ascendingOrder.setText("Ascending");

        sortOrder.add(descendingOrder);
        descendingOrder.setText("Descending");

        showSortedData.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        showSortedData.setText("Show");
        showSortedData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showSortedDataActionPerformed(evt);
            }
        });

        statusBox.setText("Please enter your name and age in the provided boxes then press Start.");
        statusBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusBoxActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Name");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Age");

        resetRecordsButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        resetRecordsButton.setText("Reset Records");
        resetRecordsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetRecordsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(271, 271, 271)
                .addComponent(readyButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(72, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(startButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(resetButton))
                                .addComponent(jLabel1))
                            .addComponent(jLabel5))
                        .addGap(217, 217, 217))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(showSortedData, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(sortByScore)
                                            .addComponent(sortByAge)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel3)
                                            .addComponent(ascendingOrder)
                                            .addComponent(descendingOrder)))
                                    .addComponent(resetRecordsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(37, 37, 37)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(58, 58, 58))))
            .addGroup(layout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusBox)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(button3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(button4, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nameBox, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ageBox, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(32, 32, 32)
                                .addComponent(button2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(95, 95, 95))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(nameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(ageBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(13, 13, 13)
                .addComponent(readyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(button3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button4, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(statusBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sortByScore)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sortByAge)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ascendingOrder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(descendingOrder)
                        .addGap(14, 14, 14)
                        .addComponent(showSortedData, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(resetRecordsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
    // Game starts
        // enable Reset and Ready buttons, disable Start button
        resetButton.setEnabled(true);
        readyButton.setEnabled(true);
        startButton.setEnabled(false);
        
        // record player's name and age
        playerName = nameBox.getText();
        playerAge = Integer.parseInt(ageBox.getText());
        // clears name and age text boxes
        nameBox.setText(null);
        ageBox.setText(null);
        
        // next instructions
        statusBox.setText("Press ready to start the game.");
        
        // read text file and add to arraylist
    }//GEN-LAST:event_startButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
    // Reset game
        gameReset();
    }//GEN-LAST:event_resetButtonActionPerformed

    private void readyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readyButtonActionPerformed
        // disable Play and ready buttons
        startButton.setEnabled(false);
        readyButton.setEnabled(false);
        // enable coloured buttons
        button1.setEnabled(true);
        button2.setEnabled(true);
        button3.setEnabled(true);
        button4.setEnabled(true);
        
        // set button colours
        int random = 0;
        
        // Button 1
        while(true) {
            // picks a random number between 0 and 3
            random = ThreadLocalRandom.current().nextInt(0, 4);
            // if that number has already been picked, roll again
            if(buttonColourChosen[random] == false) {
                break;
            }
        }
        // set button colour and value based on random number chosen and note it's been chosen
        button1.setBackground(buttonColour[random]);
        buttonValue[0] = random;
        buttonColourChosen[random] = true;
        
        // Button 2
        while(true) {
            // picks a random number between 0 and 3
            random = ThreadLocalRandom.current().nextInt(0, 4);
            // if that number has already been picked, roll again
            if(buttonColourChosen[random] == false) {
                break;
            }
        }
        // set button colour and value based on random number chosen and note it's been chosen
        button2.setBackground(buttonColour[random]);
        buttonValue[1] = random;
        buttonColourChosen[random] = true;
        
        // Button 3
        while(true) {
            // picks a random number between 0 and 3
            random = ThreadLocalRandom.current().nextInt(0, 4);
            // if that number has already been picked, roll again
            if(buttonColourChosen[random] == false) {
                break;
            }
        }
        // set button colour and value based on random number chosen and note it's been chosen
        button3.setBackground(buttonColour[random]);
        buttonValue[2] = random;
        buttonColourChosen[random] = true;
        
        // Button 4
        while(true) {
            // picks a random number between 0 and 3
            random = ThreadLocalRandom.current().nextInt(0, 4);
            // if that number has already been picked, roll again
            if(buttonColourChosen[random] == false) {
                break;
            }
        }
        // set button colour and value based on random number chosen and note it's been chosen
        button4.setBackground(buttonColour[random]);
        buttonValue[3] = random;
        buttonColourChosen[random] = true;
        
        /* COLOUR SETTING DONE */
        // choose a "correct" colour that the player must pick
        correctColour = ThreadLocalRandom.current().nextInt(0, 4);
        readyButton.setText(colourNames[correctColour]);
        statusBox.setText("Press the button with the colour described by the middle button.");
        
        // start the timer
        startTime = System.nanoTime();
        // rest of code is dependent on other buttons
        
    }//GEN-LAST:event_readyButtonActionPerformed

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        buttonPressed(0);
    }//GEN-LAST:event_button1ActionPerformed

    private void button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button2ActionPerformed
        buttonPressed(1);
    }//GEN-LAST:event_button2ActionPerformed

    private void button3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button3ActionPerformed
        buttonPressed(2);
    }//GEN-LAST:event_button3ActionPerformed

    private void button4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button4ActionPerformed
        buttonPressed(3);
    }//GEN-LAST:event_button4ActionPerformed

    private void showSortedDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showSortedDataActionPerformed
        // Sort the players
        sort(playerList);
        
        if(sortByScore.isSelected()) {
            sortedArea.setText("Sorting by score.\n\n");
        }
        else {
            sortedArea.setText("Sorting by age.\n\n");
        }
        sortedArea.append("Name\tAge\tScore\n");
        // for ascending order, print normally
        if(ascendingOrder.isSelected()) {
            for(int i = 0; i < playerList.size(); i++) {
                sortedArea.append(playerList.get(i).getName() + "\t" + playerList.get(i).getAge() + "\t" + playerList.get(i).getScore() + "\n");
            }
        }
        // for descending, print backwards
        else {
            for(int i = playerList.size() - 1; i >= 0; i--) {
                sortedArea.append(playerList.get(i).getName() + "\t" + playerList.get(i).getAge() + "\t" + playerList.get(i).getScore() + "\n");
            }
        }
    }//GEN-LAST:event_showSortedDataActionPerformed

    private void resetRecordsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetRecordsButtonActionPerformed
        // clears text file
        try {
            PrintWriter writer = new PrintWriter("src\\my\\clickthecolour\\PlayerRecord.txt");
        }
        catch (IOException e) {
                System.out.println("File not found.");
        }
        // clears the ArrayList
        playerList.clear();
    }//GEN-LAST:event_resetRecordsButtonActionPerformed

    private void statusBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_statusBoxActionPerformed
    
    // Method to reset game
    private void gameReset() {
        // enable Start button, disable Reset and Ready buttons
        startButton.setEnabled(true);
        resetButton.setEnabled(false);
        readyButton.setEnabled(false);
        // disable coloured buttons
        button1.setEnabled(false);
        button2.setEnabled(false);
        button3.setEnabled(false);
        button4.setEnabled(false);
        // reset variables for choosing button properties (colour chosen, respective values)
        clickCount = 0;
        correctColour = 0;
        for(int i = 0; i < 4; i++) {
            buttonColourChosen[i] = false;
        }
        for(int i = 0; i < 4; i++) {
            buttonValue[i] = 0;
        }
    }
    
    // Method to perform steps when a coloured button is pressed
    private void buttonPressed(int buttonNumber) {
        // change button text back to "Ready"
        readyButton.setText("Ready");
        // add to clickCount
        clickCount++;
        // stop the timer
        endTime = System.nanoTime();
        // add time it took for player to click to the array
        clickTime[clickCount - 1] = endTime - startTime;
        
        // check if click was correct
        // ends game if wrong button clicked
        if(buttonValue[buttonNumber] != correctColour) {
            statusBox.setText("Wrong button pressed. Please enter your info and press Start to try again.");
            gameReset();
        }
        
        // if 5 buttons have been clicked correctly, game has been successfully completed
        else if(clickCount >= 5) {
            statusBox.setText("Well done! Please enter your info and press Start to play again.");
            // Construct the Player and add to the playerList
            // young player if younger than 10
            if(playerAge < 10) {
                Player young = new YoungPlayer(playerName, playerAge, clickTime);
                playerList.add(young);
            }
            // old player if older than 60
            else if (playerAge > 60) {
                Player old = new OldPlayer(playerName, playerAge, clickTime);
                playerList.add(old);
            }
            else {
                Player normal = new Player(playerName, playerAge, clickTime);
                playerList.add(normal);
            }
            // print info to a file
            try(FileWriter fw = new FileWriter("src\\my\\clickthecolour\\PlayerRecord.txt", true);
                BufferedWriter bw = new BufferedWriter(fw);
                PrintWriter file = new PrintWriter(bw)) {
                // colons between info for splitting when file is read
                file.println(playerName + ":" + playerAge + ":" + clickTime[0] + ":" + clickTime[1] + ":" + clickTime[2] + ":" + clickTime[3] + ":" + clickTime[4]);
            } catch (IOException e) {
                System.out.println("File not found.");
            }
            // reset game
            gameReset();
        }
        
        // otherwise, game continues
        else {
            // disable further button pressing
            button1.setEnabled(false);
            button2.setEnabled(false);
            button3.setEnabled(false);
            button4.setEnabled(false);
            statusBox.setText("Click " + clickCount + " correct! Press the Ready button for the next colour.");
            // enable ready button
            readyButton.setEnabled(true);
            // reset variables for choosing button properties
            for(int i = 0; i < 4; i++) {
                buttonColourChosen[i] = false;
            }
            for(int i = 0; i < 4; i++) {
                buttonValue[i] = 0;
            }
        }
    }
    
    // Method to sort the ArrayList using insertion sort
    private void sort(ArrayList<Player> list) {
        // sorts by score
        if(sortByScore.isSelected()) {
            for(int i = 1; i < list.size(); i++) {
                double temp = list.get(i).getScore();
                Player tempPlayer = list.get(i);
                int j = i - 1;
                // moves elements left of current (i) element to the right until correct spot is made for it
                while(j >= 0 && list.get(j).getScore() > temp) {
                    list.set(j + 1, list.get(j));
                    j--;
                }
                // moves current element to the right spot
                list.set(j + 1, tempPlayer);
            }
        }
        // sorts by age
        else {
            for(int i = 1; i < list.size(); i++) {
                double temp = list.get(i).getAge();
                Player tempPlayer = list.get(i);
                int j = i - 1;
                // moves elements left of current (i) element to the right until correct spot is made for it
                while(j >= 0 && list.get(j).getAge() > temp) {
                    list.set(j + 1, list.get(j));
                    j--;
                }
                // moves current element to the right spot
                list.set(j + 1, tempPlayer);
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClickTheColourUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClickTheColourUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClickTheColourUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClickTheColourUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClickTheColourUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ageBox;
    private javax.swing.JRadioButton ascendingOrder;
    private javax.swing.JButton button1;
    private javax.swing.JButton button2;
    private javax.swing.JButton button3;
    private javax.swing.JButton button4;
    private javax.swing.JRadioButton descendingOrder;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField nameBox;
    private javax.swing.JButton readyButton;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton resetRecordsButton;
    private javax.swing.JButton showSortedData;
    private javax.swing.JRadioButton sortByAge;
    private javax.swing.JRadioButton sortByScore;
    private javax.swing.ButtonGroup sortOrder;
    private javax.swing.ButtonGroup sortProperty;
    private javax.swing.JTextArea sortedArea;
    private javax.swing.JButton startButton;
    private javax.swing.JTextField statusBox;
    // End of variables declaration//GEN-END:variables
}
